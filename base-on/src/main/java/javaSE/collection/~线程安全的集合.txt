线程安全：
    一般使用synchronized关键字加锁同步控制，来解决线程不安全问题。
    线程不安全并不是多线程环境下就不能使用。
    注意线程不安全条件：多线程操作同一个对象。比如上述代码就是在多个线程操作同一个ArrayList对象。

一、旧的线程安全的集合
    任何集合类都可以通过使用同步包装器变成线程安全的：
        List<E> synchArrayList = Collections.synchronizedList(new ArrayList<E>());
        Map<K,V> synchMap = Collections.synchronizedList(new HasMap<K,V>());
    如果在另一个线程可能进行修改时要对集合进行迭代，任然需要使用封锁。
        synchronized(synchHashMap)
        {
            Iterator<K> iter = synchHashMap.keySet().iterator();
            while(iter.hasNext())
                //遍历
        }
二、高效的映像、集合和队列:
    java.util.concurrent包提供了映像、有序集和队列的高效实现：ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentLinkedQueue。
    这些集合通过复杂的算法，通过允许并发的访问数据结构的不同部分来使竞争极小化。
    ConcurrentLinkedQueue是“线程安全”的队列，而LinkedList是非线程安全的。


Vector：就比Arraylist多了个同步化机制（线程安全）。
Hashtable：就比Hashmap多了个线程安全。
ConcurrentHashMap:是一种高效但是线程安全的集合。
Stack：栈，也是线程安全的，继承于Vector。



Vector的方法都是同步的(synchronized),所以是线程安全的，Arraylist的方法不是，由于线程安全的同步机制必然回影响性能，因此ArrayList的性能比Vector要好。
在扩容机制上当Vector的元素超过它的初始化大小的时候会将容量翻倍，而ArrayList只会增长50%的大小，这样Vector就白白的浪费了大量的空间。



LinkedList和ArrayList在数据结构上有较大的差别的：
ArrayList的数据结构是基于数组的(Object[]), 而LinkList内部结构是基于一组链接的记录，形式上属于链表的。
因为是链表所以不存在扩容(一下子容量翻盘)之说，所以在增加元素方面linkList效率会高，但是如果加在末尾就没啥区别(不扩容的情况下)，
因为如果向ArrayList中添加(前面或者中间)的时候再其后面的元素需要整体向后移(类似元素重新排列)，
但是如果linkList添加一个元素 无论是加在前面和后面原理都是一样的(添加一个Entry的性能，ArrayList则需要重新排序)，删除类似，查询的时候如果是随机获取某一个元素ArrayList性能要好些。
反正LinkList增加，删除性能好线程安全，ArrayList随机读取效率高，线程不安全。
如果是迭代读取其性能没啥差别。



hashtable是线程安全的,即hashtable的方法都提供了同步机制；
hashmap不是线程安全的,即不提供同步机制；
hashtable不允许插入空值,hashmap允许!里面的数据结构和操作方式基本一致。

ConcurrentHashMap:是一种高效但是线程安全的集合
ConcurrentHashMap和HashMap相比是线程安全的，但是效率也比较高。
它引入了一个“分段锁”的概念，具体可以理解为把一个大的Map拆分成N个小的HashTable，根据key.hashCode()来决定把key放到哪个HashTable中。
在ConcurrentHashMap中，把Map分成了N个Segment(数组元素)，put和get的时候，都是现根据key.hashCode()算出放到哪个Segment中：
因为HashMap的数据结构是数据和链表，通过hash算法算错该key所以在的数组下标，然后在根据equals去比较可以的值然后在获取对象。
ConcurrentHashMap是对每个数组进行加锁，当多个线程同时访问的该集合的时候，通过hash算法得出的结果相同的时候才需要去同步数据(等待或获取锁)，
这样能碰见锁的概览就大大的减少了，
因为为了分布均匀，HashMap为了防止hash重复，引入了高位算法，所以这样经过计算以后的值能落在同一个数组上的几率又大大的减少了。
HashMap的这些算法和操作全部继承与AbstractMap抽象类，二ConcurrentHashMap也继承了AbstractMap抽象类，所以也继承了这些操作也具备这些功能。
当然效率高也是相对HsahTable的。
通过这样的机制效率比HsahTable高了很多很多，而且又是线程安全的

CopyOnWriteArrayList
在那些遍历操作大大地多于插入或移除操作的并发应用程序中，一般用 CopyOnWriteArrayList 类替代 ArrayList 。
如果是用于存放一个侦听器（listener）列表，例如在AWT或Swing应用程序中，或者在常见的JavaBean中，那么这种情况很常见
（相关的 CopyOnWriteArraySet 使用一个 CopyOnWriteArrayList 来实现 Set 接口） 。

如果您正在使用一个普通的 ArrayList 来存放一个侦听器列表，那么只要该列表是可变的，而且可能要被多个线程访问，
就必须要么在对其进行迭代操作期间，要么在迭代前进行的克隆操作期间，锁定整个列表，这两种做法的开销都很大。
当对列表执行会引起列表发生变化的操作时，
CopyOnWriteArrayList 并不是为列表创建一个全新的副本，它的迭代器肯定能够返回在迭代器被创建时列表的状态，
而不会抛出 ConcurrentModificationException 。
在对列表进行迭代之前不必克隆列表或者在迭代期间锁定列表，因为迭代器所看到的列表的副本是不变的。
换句话说， CopyOnWriteArrayList 含有对一个不可变数组的一个可变的引用，因此，只要保留好那个引用，您就可以获得不可变的线程安全性的好处，而且不用锁 定列表。



线程不安全
java.util.ArrayList、java.util.LinkedList、
java.util.HashSet、
java.util.HashMap 等集合实现类都是线程不安全的，在多线程环境下使用的话，将会得到无法预期的结果。

遍历不安全
java.util.Hashtable、java.util.Vector等集合类在多线程环境下，
如果只是调用put、get、remove等方法的话是能保证线程安全的，但如果进行遍历的话就无法保证线程安全了。这种情况也叫做“条件线程安全”。

线程安全
java.util.concurrent.ConcurrentHashMap、java.util.concurrent.CopyOnWriteArrayList、
java.util.concurrent.ConcurrentArraySet等是线程安全的。
