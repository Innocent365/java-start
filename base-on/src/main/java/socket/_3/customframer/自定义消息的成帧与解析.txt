

消息的成帧与解析:


由于协议通常处理的是由一组字段组成的离散的信息，因此应用程序协议必须指定消息的接收者如何确定何时消息已被完整接收。
成帧技术就是解决接收端如何定位消息首尾位置问题的，由于协议通常处理的是由一组字段组成的离散的信息，
因此应用程序协议必须指定消息的接收者如何确定何时消息已被完整。主要有两种技术使接收者能够准确地找到消息的结束位置：

    使用特殊符号：消息的结束由一个唯一的标记指出，即发送者在传输完数据后显式添加的一个特定字节序列，
        这个特殊标记不能在传输的数据中出现（这也不是绝对的，应用填充技术能够对消息中出现的定界符进行修改，从而使接收者不将其识别为定界符）。该方法通常用在以文本方式编码的消息中。
    根据长度界定：在变长字段或消息前附加一个固定大小的字段，用来指示该字段或消息中包含了多少字节。
        该方法主要用在以二进制字节方式编码的消息中。


由于 UDP 套接字保留了消息的边界信息，因此不需要进行成帧处理（实际上，主要是 DatagramPacket 负载的数据有一个确定的长度，接收者能够准确地知道消息的结束位置），
而 TCP 协议中没有消息边界的概念，因此，在使用 TCP 套接字时，
成帧就是一个非常重要的考虑因素（在 TCP 连接中，接收者读取完最后一条消息的最后一个字节后，
将受到一个流结束标记，即 read（）返回-1，该标记指示出已经读取到了消息的末尾，
非严格意义上来讲，这也算是基于定界符方法的一种特殊情况）。


https://wiki.jikexueyuan.com/project/java-socket/application-protocol.html

例：
在传输消息时，用 Java 内置的方法和工具确实很用，如：对象序列化，RMI 远程调用等。但有时候，针对要传输的特定类型的数据，实现自己的方法可能更简单、容易或有效。
下面给出一个实现了自定义构建和解析协议消息的 Demo：
    个简单的投票协议。这里，一个客户端向服务器发送一个请求消息，消息中包含了一个候选人的 ID，范围在 0~1000。
        程序支持两种请求：
            一种是查询请求，即向服务器询问候选人当前获得的投票总数，
                服务器发回一个响应消息，包含了原来的候选人 ID 和该候选人当前获得的选票总数；
            另一种是投票请求，即向指定候选人投一票，服务器对这种请求也发回响应消息，
                包含了候选人 ID 和获得的选票数（包含了刚刚投的一票）。










