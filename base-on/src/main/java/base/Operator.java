package base;


/**
 * 运算符:
 *     优先级口诀：括单算关位逻条赋
 *
 */
public class Operator {

    /**
     * 二进制主要运算符
     * @param args
     */
    public static void main(String[] args) {
        /**
         * 位运算符
         */
        //a.and与运算符&: 	两个操作数中位都为1，结果才为1，否则结果为0
        System.out.println(2 & 3);//10 & 11 = 10 因此结果为2
        System.out.println("a-----------------");

        //TODO clear
        //如果漏写一个&， 逻辑与&& 变成了 按位与&
        if(false && (1>0)){//注意逻辑与&& 是短路运算，后面的可能不会计算,
                            //& 后面的一定会执行计算
            //if(1 & 2)  编译错误
        }

        System.out.println(1 & 2);
        System.out.println();

        //b.or或运算符|: 	两个位只要有一个为1，那么结果就是1，否则就为0
        System.out.println(2 | 3);//10 | 11 = 11 因此结果为3
        System.out.println("b-----------------");

        //c.xor异或运算符^:	如果相对应位值相同，则结果为0，否则为1
        System.out.println(2 ^ 3);//10 ^ 11 = 01 因此结果为1
        //  一个数异或同一个数两次，结果还是那个数
        System.out.println((2 ^ 3) ^ 3);//01 ^ 11 = 10因此结果为2
        System.out.println(10 ^ 0);//任何数异或0都不变
        System.out.println("-----------------");

        //d.not非运算符~（按位取反）: 	如果位为0，结果是1，如果位为1，结果是0。整数a取反为-a-1
        System.out.println(~12); //-13
        System.out.println(~-12);//11
        System.out.println(0b1111_1111_1111_1111_1111_1111_1111_0011);

        System.out.println(~1);//-2
        System.out.println(~0);//-1
        System.out.println(~-1);//0
        System.out.println(~-2);//1
        System.out.println("c1-----------------");

        System.out.println(0b11111111111111111111111111110100);//负数用补码表示
        System.out.println(0b00000000000000000000000000001011);


        //负数取反值为：正的（值-1）
        System.out.println("c2-----------------");

        /**
         * 移位运算符，
         *  移位符是Java中的基本操作符，实际支持的类型只有int和long：
         *      在对byte,short,char类型进行移位操作时，都会先将其转换为int类型再进行操作。
         *      double，float在二进制中的表现比较特殊，因此不能来进行移位操作，报错，编译不过
         *
         *  如果将 int 类型左移或者右移大于或等于最大位数时，并不会像预计的那样将数据全部填充为1或0
         *  java 的处理方式是 移动超过该类型的最大长度，则先取余，
         *      例如 int m >> 33 即 m >> 1
         *          long n >> 64 即不移动
         */
        //e.左移<<，把一个数的全部位数都向左移动若干位（就相当于乘以2的若干次方就行了）
        //  在低位补0
        System.out.println(2 << 3);//0010 << 3 = 10000结果为16

        //f.带符号右移（也叫算数右移）>>, 考虑符号位，右移就是把一个数的全部位数都向右移动若干位（操作其实就是吧右边的N位直接砍掉即可）
        //  正数做右移操作时，高位补充0；负数进行右移时，高位补充1, 正负不会变
        System.out.println(2 >> 3);//0010 >> 3 = 0000位数不够，结果为0
        System.out.println(100 >> 3);//1100100 >> 3 = 1100结果为12(相当于除以2的若干次方忽略余数)
        System.out.println(1000 >> 3);//125
        System.out.println(-2 >> 2);//1111 1111 ... 0010 >> 2 = -1

        //g.无符号右移（也叫逻辑右移） >>>, 忽略符号位，在高位补0       注意：没有无符号左移
        //  正数做>>>运算的时候和>>是一样的， 负数通过此移位运算符移位成正数
        System.out.println(16 >> 2 == 16 >>> 2);//16/2^2 = 4

        System.out.println(-1 >> 2);//1000 0000 ... 0001 >> 2 = -1
        System.out.println(-1 >>> 1);//2147483647，Integer.MAX_VALUE
    }


}
/**
 *
 * 1.运算符:
 *   1)算术:+ - * / %,++,--
 *   2)关系:>,<,>=,<=,==,!= boolean
 *   3)逻辑:&&,||,!boolean
 *   4)赋值:=,+=,-=,*=,/=,%=
 *   5)拼接:+
 *   6)三目:boolean?数1:数2
 * 2 .二进制运算符:
 *      它包括了：“与&”、“或|”、“非~”、“异或^”
 *          左移 <<、右移 >>、无符号右移 >>>
 *
 *
 *
 */
