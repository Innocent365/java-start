Class类简介:
    虚拟机为每种类型管理一个独一无二的Class对象。也就是说，每个类（型）都有一个Class对象。运行程序时，Java虚拟机(JVM)首先检查是否所要加载的类对应的Class对象是否已经加载。如果没有加载，JVM就会根据类名查找.class文件，并将其Class对象载入。
      基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也都对应一个 Class 对象。
      每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。
      一般某个类的Class对象被载入内存，它就用来创建这个类的所有对象。

一、如何得到Class的对象:
    1.Class c1 = x.getClass();
    2.使用Class类的中静态forName()方法获得与字符串对应的Class对象。例如：
        Class c2=Class.forName("MyObject");
    3.Class cl2 = int.class;

二、Class类的常用方法
    1、getName():最常用的，以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称
        一个Class对象描述了一个特定类的属性

    2、newInstance()：为类创建一个实例，这个方法叫做newInstance()。例如：
            x.getClass.newInstance()，创建了一个同x一样类型的新实例。
        newInstance()方法调用默认构造器（无参数构造器）初始化新建对象。

    3、getClassLoader():返回该类的类加载器。

    4、getComponentType()：返回表示数组组件类型的 Class。

    5、getSuperclass()：返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class。

    6、isArray()：判定此 Class 对象是否表示一个数组类。

三、 Class.forName()方法:
    Class.forName：是一个静态方法，返回与给定的字符串名称相关联类或接口的Class对象。

四、在初始化一个类，生成一个实例的时候，newInstance()方法和new关键字除了一个是方法，一个是关键字外，最主要有什么区别？
      1.它们的区别在于创建对象的方式不一样，前者是使用类加载机制，后者是创建一个新类。
      2.那么为什么会有两种创建对象方式？
            这主要考虑到软件的可伸缩、可扩展和可重用等软件设计思想。
            Java中工厂模式经常使用newInstance()方法来创建对象，因此从为什么要使用工厂模式上可以找到具体答案。例如：
               class c = Class.forName(“Example”);
               factory = (ExampleInterface)c.newInstance();
           其中ExampleInterface是Example的接口，可以写成如下形式：
              String className = "Example";
              class c = Class.forName(className);
              factory = (ExampleInterface)c.newInstance();

           进一步可以写成如下形式：
              String className = readfromXMlConfig;//从xml 配置文件中获得字符串
              class c = Class.forName(className);
              factory = (ExampleInterface)c.newInstance();

            上面代码已经不存在Example的类名称，它的优点是，无论Example类怎么变化，上述代码不变，甚至可以更换Example的兄弟类Example2 , Example3 , Example4……，只要他们继承ExampleInterface就可以。
            3.从JVM的角度看，我们使用关键字new创建一个类的时候，这个类可以没有被加载。  但是使用newInstance()方法的时候，
             就必须保证：
                  1、这个类已经加载；
                  2、这个类已经连接了。

            而完成上面两个步骤的正是Class的静态方法forName()所完成的，这个静态方法调用了启动类加载器，即加载 java API的那个加载器。
             现在可以看出，newInstance()实际上是把new这个方式分解为两步，即首先调用Class加载方法加载某个类，然后实例化。这样分步的好处是显而易见的。我们可以在调用class的静态加载方法forName时获得更好
             的灵活性，提供给了一种降耦的手段。

        3.最后用最简单的描述来区分new关键字和newInstance()方法的区别：
            newInstance: 弱类型。低效率。只能调用无参构造。
            new: 强类型。相对高效。能调用任何public构造。

========================
https://blog.csdn.net/fengyuzhengfan/article/details/38086743