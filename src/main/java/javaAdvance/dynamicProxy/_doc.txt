java的动态代理机制中，有两个重要的类或接口，InvocationHandler(Interface)、另一个是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。
首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：


InvocationHandler接口:
    每一个动态代理类都必须要实现这个接口，并且每个代理类的实例都关联到了一个handler，
    当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。
    InvocationHandler这个接口的唯一一个方法 invoke 方法：
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;

        proxy: 指代所代理的那个真实对象
        method: 指代的是所要调用真实对象的某个方法的Method对象
        args: 指代的是调用真实对象某个方法时接受的参数
Proxy类: 动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance()
    public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException
        loader:　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载
        interfaces: 一个Interface对象的数组，表示将要给代理对象提供的一组接口
        h: 表示当动态代理在调用方法的时候，会关联到哪一个InvocationHandle对象上



    Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.


动态代理神奇的地方就是：
1.代理对象是在程序运行时产生的，而不是编译期；
2.对代理对象的所有接口方法调用都会转发到InvocationHandler.invoke()方法，
    在invoke()方法里我们可以加入任何逻辑，比如修改方法参数，加入日志功能、安全检查、权限检查功能等；
    之后我们通过某种方式执行真正的方法体，示例中通过反射调用了Hello对象的相应方法，还可以通过RPC调用远程方法。


Java动态代理为我们提供了非常灵活的代理机制，但Java动态代理是基于接口的，如果对象没有实现接口该如何使用代理呢?
CGLIB(Code Generation Library)动态代理，
    是一个基于ASM(一个Java字节码操控框架)的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承方式实现代理。
    既然是继承就不得不考虑final的问题。我们知道final类型不能有子类，所以CGLIB不能代理final类型，遇到这种情况会抛出类似如下异常：
        java.lang.IllegalArgumentException: Cannot subclass final class cglib.HelloConcrete


